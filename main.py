import os
from git import Repo
from gitdb.exc import ParseError
import requests
from dotenv import load_dotenv





def print_commit_data(commit):
    print('-----')
    print(str(commit.hexsha))
    print("\"{}\" by {} ({})".format(commit.summary, commit.author.name, commit.author.email))
    print(str(commit.authored_datetime))
    print(str("count: {} and size: {}".format(commit.count(), commit.size)))


def print_repository_info(repo):
    print('Repository description: {}'.format(repo.description))
    print('Repository active branch is {}'.format(repo.active_branch))

    for remote in repo.remotes:
        print('Remote named "{}" with URL "{}"'.format(remote, remote.url))

    print('Last commit for repository is {}.'.format(str(repo.head.commit.hexsha)))

def check_malware(repo):
    branches = repo.branches
    # if(len(branches) != 1):
    #     return True
    if(repo.active_branch.name != "master"):
        return True, "Other Branch Created!"

    untrackedFiles = repo.untracked_files

    changedFiles = [ item.a_path for item in repo.index.diff(None) ]
    if(len(changedFiles) > 0 or len(untrackedFiles) > 0):
        return True, f"Files changed/added: {changedFiles} {untrackedFiles}"
    else:
        return False, ""

def send_message(condition):
    # token = "1855878719:AAHipacV8l1g2muUxA6f9ADx_jannkoecR4"
    # chat_id = "1209125646"
    text = f"MALWARE ALERT! \n{condition[1]}"
    

    if (condition[0]):
        url_base = "https://api.telegram.org/bot" + os.getenv("TOKEN") + "/" + "sendMessage?chat_id=" + os.getenv("CHAT_ID") + "&text=" + text
        x = requests.get(url_base)
        print(x.status_code)
    else:
        print("not true")




if __name__ == "__main__":
    load_dotenv(verbose = True)
    repo_path = os.getenv('./gitMalwareTracker')
    # Repo object used to interact with Git repositories
    repo = Repo(repo_path)

    # check that the repository loaded correctly
    if not repo.bare:
        print('Repo at {} successfully loaded.'.format(repo_path))
        print_repository_info(repo)
        # create list of commits then print some of them to stdout
        # commits = list(repo.iter_commits('master'))[:COMMITS_TO_PRINT]
        # for commit in commits:
        #     print_commit_data(commit)
        #     pass
        # branch_status = repo.index.diff(repo.head.commit)
        send_message(check_malware(repo))

    else:
        print('Could not load repository at {} :'.format(repo_path))